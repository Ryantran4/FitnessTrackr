{"ast":null,"code":"var _jsxFileName = \"/Users/ryantran/fitness-dev-frontend/src/components/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useParams, useHistory } from 'react-router';\nimport { useContext } from 'react';\nimport { UserContext } from '../context/UserContext';\nimport { callApi } from '../utils/CallApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  REACT_APP_BASE_URL\n} = process.env;\n\nconst Register = () => {\n  _s();\n\n  const {\n    isLoggedIn,\n    setIsLoggedIn,\n    setUserToken,\n    setUser\n  } = useContext(UserContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const params = useParams();\n  const history = useHistory();\n  console.log('params: ', params);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: params.method\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async event => {\n        event.preventDefault();\n        const fetchUrl = `${REACT_APP_BASE_URL}/users/${params.method}`;\n        const resp = await fetch(fetchUrl, {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username,\n            password\n          })\n        });\n\n        if (params.method == 'register') {\n          const registerData = await register({\n            username: username,\n            password: password\n          });\n\n          if (registerData && !registerData.name) {\n            localStorage.setItem(\"userToken\", registerData.token);\n            setUserToken(registerData.token);\n            setIsLoggedIn(true);\n            setUser(username);\n          } else {\n            alert('failed');\n          }\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"username\",\n        onChange: event => setUser(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"password\",\n        onChange: event => setPassword(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), params.method === 'Register' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Register Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 48\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Register, \"40RcO5xvLTaeI+NwZaJ0vi2nO+c=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/ryantran/fitness-dev-frontend/src/components/Register.js"],"names":["React","useState","useParams","useHistory","useContext","UserContext","callApi","REACT_APP_BASE_URL","process","env","Register","isLoggedIn","setIsLoggedIn","setUserToken","setUser","username","setUsername","password","setPassword","params","history","console","log","method","event","preventDefault","fetchUrl","resp","fetch","headers","body","JSON","stringify","registerData","register","name","localStorage","setItem","token","alert","target","value"],"mappings":"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","sourcesContent":["\nimport React, {useState} from 'react';\nimport { useParams, useHistory } from 'react-router';\nimport { useContext } from 'react';\nimport { UserContext } from '../context/UserContext';\n\n\nimport { callApi } from '../utils/CallApi';\n\nconst { REACT_APP_BASE_URL } = process.env;\n\nconst Register = () => {\n    const {isLoggedIn, setIsLoggedIn, setUserToken, setUser} = useContext(UserContext)\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const params = useParams();\n    const history = useHistory();\n    console.log('params: ', params);\n\n\n    return<>\n        <h1>{params.method}</h1>\n        <form onSubmit={async (event) => {\n            event.preventDefault();\n            const fetchUrl = `${REACT_APP_BASE_URL}/users/${params.method}`\n\n            const resp = await fetch(fetchUrl,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username,\n                password,\n                \n            })\n        });\n        if (params.method=='register') {\n            const registerData = await register({username:username, password:password})\n            if(registerData && !registerData.name) {\n                localStorage.setItem(\"userToken\", registerData.token);\n                setUserToken(registerData.token)\n                setIsLoggedIn(true)\n                setUser(username)\n            }else{\n                alert('failed')\n            }\n        }\n\n        }}>\n            <input type=\"text\" placeholder=\"username\" \n            onChange={(event)=> setUser(event.target.value)}></input>\n            <hr></hr>\n            <input type=\"password\" placeholder=\"password\" \n            onChange={(event)=> setPassword(event.target.value)}></input>\n            <hr></hr>\n            {\n                params.method === 'Register' ? <div>Register Input</div> : ''\n            }\n\n            <button type=\"submit\">Submit</button>\n\n        </form>\n    </>\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}