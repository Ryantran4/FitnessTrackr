{"ast":null,"code":"var _jsxFileName = \"/Users/ryantran/fitness-dev-frontend/src/components/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { useParams, useHistory } from 'react-router';\nimport { callApi } from '../CallApi';\nimport { UserContext, UserProvider } from '../UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  REACT_APP_BASE_URL\n} = process.env;\n\nconst Register = () => {\n  _s();\n\n  const {\n    setToken\n  } = useContext(UserContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const params = useParams(); // const history = useHistory();\n  // console.log('params: ', params);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: params.method\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async event => {\n        event.preventDefault();\n        const fetchUrl = `${REACT_APP_BASE_URL}/users/${params.method}`;\n        const resp = await fetch(fetchUrl, {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user: {\n              username,\n              password\n            }\n          })\n        });\n        const respObj = await resp.json();\n\n        if (respObj.data) {\n          setToken(respObj.data.token);\n          console.log(respObj.data);\n\n          if (respObj.data.token) {\n            history.push('/Home');\n          }\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"username\",\n        value: username,\n        onChange: event => setUsername(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"password\",\n        value: password,\n        onChange: event => setPassword(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), params.method === 'Register' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 48\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Register, \"ppxGgr5/hZVyf3Fm1JM35DHlaRQ=\", false, function () {\n  return [useParams];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/ryantran/fitness-dev-frontend/src/components/Register.js"],"names":["React","useContext","useState","useParams","useHistory","callApi","UserContext","UserProvider","REACT_APP_BASE_URL","process","env","Register","setToken","username","setUsername","password","setPassword","params","method","event","preventDefault","fetchUrl","resp","fetch","headers","body","JSON","stringify","user","respObj","json","data","token","console","log","history","push","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,cAAtC;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,gBAA1C;;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAyBC,OAAO,CAACC,GAAvC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAeX,UAAU,CAACK,WAAD,CAA/B;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMe,MAAM,GAAGd,SAAS,EAAxB,CAJmB,CAKnB;AACA;;AAGA,sBAAM;AAAA,4BACF;AAAA,gBAAKc,MAAM,CAACC;AAAZ;AAAA;AAAA;AAAA;AAAA,YADE,eAEF;AAAM,MAAA,QAAQ,EAAE,MAAOC,KAAP,IAAiB;AAC7BA,QAAAA,KAAK,CAACC,cAAN;AACA,cAAMC,QAAQ,GAAI,GAAEb,kBAAmB,UAASS,MAAM,CAACC,MAAO,EAA9D;AAEA,cAAMI,IAAI,GAAG,MAAMC,KAAK,CAACF,QAAD,EAAU;AAClCH,UAAAA,MAAM,EAAE,MAD0B;AAElCM,UAAAA,OAAO,EAAE;AACL,4BAAgB;AADX,WAFyB;AAKlCC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACpBC,YAAAA,IAAI,EAAE;AACHf,cAAAA,QADG;AAEHE,cAAAA;AAFG;AADc,WAAf;AAL4B,SAAV,CAAxB;AAYJ,cAAMc,OAAO,GAAG,MAAMP,IAAI,CAACQ,IAAL,EAAtB;;AACA,YAAGD,OAAO,CAACE,IAAX,EAAiB;AACbnB,UAAAA,QAAQ,CAACiB,OAAO,CAACE,IAAR,CAAaC,KAAd,CAAR;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACE,IAApB;;AACA,cAAIF,OAAO,CAACE,IAAR,CAAaC,KAAjB,EAAwB;AACtBG,YAAAA,OAAO,CAACC,IAAR,CAAa,OAAb;AACD;AACJ;AAEA,OAzBD;AAAA,8BA0BI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,UAA/B;AAA0C,QAAA,KAAK,EAAEvB,QAAjD;AACA,QAAA,QAAQ,EAAGM,KAAD,IAAUL,WAAW,CAACK,KAAK,CAACkB,MAAN,CAAaC,KAAd;AAD/B;AAAA;AAAA;AAAA;AAAA,cA1BJ,eA4BI;AAAA;AAAA;AAAA;AAAA,cA5BJ,eA6BI;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,WAAW,EAAC,UAAnC;AAA8C,QAAA,KAAK,EAAEvB,QAArD;AACA,QAAA,QAAQ,EAAGI,KAAD,IAAUH,WAAW,CAACG,KAAK,CAACkB,MAAN,CAAaC,KAAd;AAD/B;AAAA;AAAA;AAAA;AAAA,cA7BJ,eA+BI;AAAA;AAAA;AAAA;AAAA,cA/BJ,EAiCQrB,MAAM,CAACC,MAAP,KAAkB,UAAlB,gBAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA/B,GAA8C,EAjCtD,eAoCI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFE;AAAA,kBAAN;AA0CH,CAnDD;;GAAMP,Q;UAIaR,S;;;KAJbQ,Q;AAqDN,eAAeA,QAAf","sourcesContent":["import React, {useContext, useState} from 'react';\nimport { useParams, useHistory } from 'react-router';\nimport { callApi } from '../CallApi';\nimport { UserContext, UserProvider } from '../UserContext';\n\nconst { REACT_APP_BASE_URL } = process.env;\n\nconst Register = () => {\n    const { setToken } = useContext(UserContext)\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const params = useParams();\n    // const history = useHistory();\n    // console.log('params: ', params);\n\n\n    return<>\n        <h1>{params.method}</h1>\n        <form onSubmit={async (event) => {\n            event.preventDefault();\n            const fetchUrl = `${REACT_APP_BASE_URL}/users/${params.method}`\n\n            const resp = await fetch(fetchUrl,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n             user: {\n                username,\n                password,\n                }\n            })\n        });\n        const respObj = await resp.json();\n        if(respObj.data) {\n            setToken(respObj.data.token);\n            console.log(respObj.data)\n            if (respObj.data.token) {\n              history.push('/Home');\n            }\n        }\n\n        }}>\n            <input type=\"text\" placeholder=\"username\" value={username}\n            onChange={(event)=> setUsername(event.target.value)}></input>\n            <hr></hr>\n            <input type=\"password\" placeholder=\"password\" value={password}\n            onChange={(event)=> setPassword(event.target.value)}></input>\n            <hr></hr>\n            {\n                params.method === 'Register' ? <div>*</div> : ''\n            }\n\n            <button type=\"submit\">Submit</button>\n\n        </form>\n    </>\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}