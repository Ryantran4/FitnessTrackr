{"ast":null,"code":"var _jsxFileName = \"/Users/ryantran/fitness-dev-frontend/src/components/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react'; // import { useParams, useHistory } from 'react-router';\n\nimport { callApi } from '../CallApi';\nimport { UserContext } from '../UserContext'; // import { UserProvider } from '../UserContext';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  REACT_APP_BASE_URL\n} = process.env;\n\nconst Register = () => {\n  _s();\n\n  const {\n    setToken\n  } = useContext(UserContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState(''); // const params = useParams();\n  // const history = useHistory();\n  // console.log('params: ', params);\n\n  const userRegister = async () => {\n    try {\n      const response = await callApi({\n        url: \"/users/register\",\n        method: \"POST\",\n        body: {\n          username,\n          password\n        }\n      });\n      console.log(response);\n\n      if (response) {\n        setToken(response.data.token);\n\n        if (response.data.token) {\n          setToken(\"\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const usernameHandler = event => {\n    setUsername(event.target.value);\n  };\n\n  const passwordHandler = event => {\n    setPassword(event.target.value);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); //stops page from refreshing\n\n    userRegister(); //function goes off to send information back to the api\n\n    setUsername(\"\"); //onSubmit sets username to an empty string\n\n    setPassword(\"\"); //onSubmit also sets the password to an empty string\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async event => {\n        event.preventDefault(); // const fetchUrl = `${REACT_APP_BASE_URL}/users/${params.method}`\n\n        const resp = await fetch(fetchUrl, {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user: {\n              username,\n              password\n            }\n          })\n        });\n        const respObj = await resp.json();\n\n        if (respObj.data) {\n          setToken(respObj.data.token);\n          console.log(respObj.data);\n\n          if (respObj.data.token) {\n            history.push('/Home');\n          }\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"username\",\n        value: username,\n        onChange: event => setUsername(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"password\",\n        value: password,\n        onChange: event => setPassword(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Register, \"VcxJTW/rOE/RLbwZE5Pw1qq+dHk=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/ryantran/fitness-dev-frontend/src/components/Register.js"],"names":["React","useState","useContext","callApi","UserContext","REACT_APP_BASE_URL","process","env","Register","setToken","username","setUsername","password","setPassword","userRegister","response","url","method","body","console","log","data","token","error","usernameHandler","event","target","value","passwordHandler","submitHandler","preventDefault","resp","fetch","fetchUrl","headers","JSON","stringify","user","respObj","json","history","push"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from 'react';\n// import { useParams, useHistory } from 'react-router';\nimport { callApi } from '../CallApi';\nimport { UserContext } from '../UserContext';\n// import { UserProvider } from '../UserContext';\n\nconst { REACT_APP_BASE_URL } = process.env;\n\nconst Register = () => {\n    const {setToken} = useContext(UserContext);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    // const params = useParams();\n    // const history = useHistory();\n    // console.log('params: ', params);\n    const userRegister = async () => {\n        try {\n            const response = await callApi({\n                url: \"/users/register\",\n                method: \"POST\",\n                body: {\n                    username,\n                    password\n                }\n            });\n            console.log(response)\n            if (response) {\n                setToken(response.data.token)\n                if (response.data.token) {\n                    setToken(\"\");\n                }\n            }\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n\n    const usernameHandler = (event) => {\n        setUsername(event.target.value);\n    }\n\n    const passwordHandler = (event) => {\n        setPassword(event.target.value);\n    }\n\n    const submitHandler = (event) => {\n        event.preventDefault(); //stops page from refreshing\n\n        userRegister(); //function goes off to send information back to the api\n\n        setUsername(\"\") //onSubmit sets username to an empty string\n        setPassword(\"\") //onSubmit also sets the password to an empty string\n    }\n\n    return<>\n        <form onSubmit={async (event) => {\n            event.preventDefault();\n            // const fetchUrl = `${REACT_APP_BASE_URL}/users/${params.method}`\n\n            const resp = await fetch(fetchUrl,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n             user: {\n                username,\n                password,\n                }\n            })\n        });\n        const respObj = await resp.json();\n        if(respObj.data) {\n            setToken(respObj.data.token);\n            console.log(respObj.data)\n            if (respObj.data.token) {\n              history.push('/Home');\n            }\n        }\n\n        }}>\n            <input type=\"text\" placeholder=\"username\" value={username}\n            onChange={(event)=> setUsername(event.target.value)}></input>\n            <hr></hr>\n            <input type=\"password\" placeholder=\"password\" value={password}\n            onChange={(event)=> setPassword(event.target.value)}></input>\n            <hr></hr>\n\n            <button type=\"submit\">Submit</button>\n\n        </form>\n    </>\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}